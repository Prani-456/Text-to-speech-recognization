import tkinter as tk
import pyttsx3
from gtts import gTTS
from tkinter import messagebox, filedialog
import os

# Initialize pyttsx3 engine
engine = pyttsx3.init()

# Create the main window
root = tk.Tk()
root.title("Text-to-Speech Application")
root.geometry("400x600")  # Adjusted window size for new button
root.configure(bg="#f0f0f0")  # Set background color

# Create a frame for text input
input_frame = tk.Frame(root, bg="#f0f0f0")
input_frame.pack(pady=10)

# Add a label
label = tk.Label(input_frame, text="Enter text to convert to speech:", bg="#f0f0f0", font=("Arial", 12))
label.pack(pady=5)

# Add a text box for input
text_box = tk.Text(input_frame, height=5, width=40, font=("Arial", 12), wrap=tk.WORD)
text_box.pack(pady=5)

# Create a frame for voice selection
voice_frame = tk.Frame(root, bg="#f0f0f0")
voice_frame.pack(pady=10)

# Add a label for voice selection
voice_label = tk.Label(voice_frame, text="Select Voice:", bg="#f0f0f0", font=("Arial", 12))
voice_label.pack(pady=5)

# Create a variable to hold the selected voice
voice_var = tk.StringVar(value="Male")  # Default voice (Male)

# Voice options
voices = engine.getProperty('voices')
voice_options = [("Male", voices[0].id), ("Female", voices[1].id)]
for voice_name, voice_id in voice_options:
    voice_radio = tk.Radiobutton(voice_frame, text=voice_name, variable=voice_var, value=voice_id, bg="#f0f0f0", font=("Arial", 10))
    voice_radio.pack(anchor=tk.W)

# Create a frame for volume control
volume_frame = tk.Frame(root, bg="#f0f0f0")
volume_frame.pack(pady=10)

# Add a label for volume control
volume_label = tk.Label(volume_frame, text="Volume (0 to 100):", bg="#f0f0f0", font=("Arial", 12))
volume_label.pack(pady=5)

# Create a scale for volume control (0 to 100)
volume_scale = tk.Scale(volume_frame, from_=0, to=100, orient=tk.HORIZONTAL, bg="#f0f0f0", font=("Arial", 10))
volume_scale.set(100)  # Default volume at 100
volume_scale.pack()

# Create a frame for speed control
speed_frame = tk.Frame(root, bg="#f0f0f0")
speed_frame.pack(pady=10)

# Add a label for speech speed control
speed_label = tk.Label(speed_frame, text="Speed (0 to 100):", bg="#f0f0f0", font=("Arial", 12))
speed_label.pack(pady=5)

# Create a scale for speech speed control (0 to 100)
speed_scale = tk.Scale(speed_frame, from_=0, to=100, orient=tk.HORIZONTAL, bg="#f0f0f0", font=("Arial", 10))
speed_scale.set(50)  # Default speed at 50
speed_scale.pack()

# Function to convert text to speech
def speak_text():
    text = text_box.get("1.0", tk.END).strip()  # Get the text from the text box
    voice = voice_var.get()  # Get the selected voice
    volume = volume_scale.get() / 100  # Get the volume (0.0 to 1.0)
    speed = speed_scale.get()  # Get the speed (0 to 100)
    
    if text:
        # Set the voice
        engine.setProperty('voice', voice)
        # Set the volume
        engine.setProperty('volume', volume)
        # Set the speed (lower value for slower speech)
        engine.setProperty('rate', 200 + (speed - 50) * 2)  # Adjust speed

        # Speak the text
        engine.say(text)
        engine.runAndWait()
    else:
        messagebox.showerror("Error", "Please enter some text.")

# Function to save text as MP3
def save_as_mp3():
    text = text_box.get("1.0", tk.END).strip()  # Get the text from the text box
    if not text:
        messagebox.showerror("Error", "Please enter some text.")
        return
    
    # Ask user to choose a location to save the file
    file_path = filedialog.asksaveasfilename(defaultextension=".mp3", filetypes=[("MP3 files", "*.mp3")])
    if file_path:
        try:
            # Use gtts to save the text as an mp3 file
            tts = gTTS(text=text, lang='en')
            tts.save(file_path)
            messagebox.showinfo("Success", f"File saved: {file_path}")
        except Exception as e:
            messagebox.showerror("Error", f"An error occurred: {e}")

# Create a frame for buttons
button_frame = tk.Frame(root, bg="#f0f0f0")
button_frame.pack(pady=20)

# Button to trigger the TTS
speak_button = tk.Button(button_frame, text="Convert to Speech", command=speak_text, bg="#4CAF50", fg="white", font=("Arial", 12))
speak_button.pack(side=tk.LEFT, padx=10)

# Button to clear the text box
def clear_text():
    text_box.delete("1.0", tk.END)

clear_button = tk.Button(button_frame, text="Clear Text", command=clear_text, bg="#FF5722", fg="white", font=("Arial", 12))
clear_button.pack(side=tk.LEFT, padx=10)

# Button to exit the application
def exit_app():
    root.destroy()

exit_button = tk.Button(button_frame, text="Exit", command=exit_app, bg="#f44336", fg="white", font=("Arial", 12))
exit_button.pack(side=tk.LEFT, padx=10)

# Button to save as MP3
save_button = tk.Button(button_frame, text="Save as MP3", command=save_as_mp3, bg="#3f51b5", fg="white", font=("Arial", 12))
save_button.pack(side=tk.LEFT, padx=10)

# Run the GUI loop
root.mainloop()
